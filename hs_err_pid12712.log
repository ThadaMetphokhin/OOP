#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 32744 bytes for Chunk::new
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Zero Based Compressed Oops mode in which the Java heap is
#     placed in the first 32GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 32GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:184), pid=12712, tid=16076
#
# JRE version: Java(TM) SE Runtime Environment (18.0.2.1+1) (build 18.0.2.1+1-1)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18.0.2.1+1-1, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -Dfile.encoding=UTF-8 --module-path=C:\Users\Tang\eclipse-workspace\LAB3\bin -XX:+ShowCodeDetailsInExceptionMessages -Djdk.module.main=LAB3 LAB3/LAB3.LAB3topic421

Host: Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz, 8 cores, 19G,  Windows 10 , 64 bit Build 19041 (10.0.19041.2251)
Time: Sat Dec 17 19:39:17 2022 SE Asia Standard Time elapsed time: 0.077613 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000013cbb4d9cf0):  JavaThread "C2 CompilerThread0" daemon [_thread_in_vm, id=16076, stack(0x0000002e46700000,0x0000002e46800000)]

Stack: [0x0000002e46700000,0x0000002e46800000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6993aa]
V  [jvm.dll+0x7f46dd]
V  [jvm.dll+0x7f5fee]
V  [jvm.dll+0x7f66a3]
V  [jvm.dll+0x25cf1f]
V  [jvm.dll+0xb8c2f]
V  [jvm.dll+0xb8fa5]
V  [jvm.dll+0x386091]
V  [jvm.dll+0x34fe71]
V  [jvm.dll+0x34f30a]
V  [jvm.dll+0x230101]
V  [jvm.dll+0x22e65c]
V  [jvm.dll+0x6f2809]
V  [jvm.dll+0x6f23ff]
V  [jvm.dll+0x1ba23d]
V  [jvm.dll+0x23de64]
V  [jvm.dll+0x23cfaa]
V  [jvm.dll+0x7a6dd1]
V  [jvm.dll+0x7a120a]
